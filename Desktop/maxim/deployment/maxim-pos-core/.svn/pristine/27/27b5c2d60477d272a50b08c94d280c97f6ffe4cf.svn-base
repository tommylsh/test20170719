package com.maxim.pos.sales.service;

import java.io.File;
import java.io.IOException;
import java.util.Properties;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.maxim.pos.common.entity.ApplicationSetting;
import com.maxim.pos.common.entity.BranchInfo;
import com.maxim.pos.common.entity.BranchScheme;
import com.maxim.pos.common.service.ApplicationSettingService;
import com.maxim.pos.common.service.NetworkShareService;
import com.maxim.pos.common.util.JcifsUtils;
import com.maxim.pos.common.util.LogUtils;
import com.maxim.util.EncryptionUtil;

@Service("fileCopyService")
public class FileCopyServiceImpl implements FileCopyService{

	@Autowired
	private ApplicationSettingService applicationSettingService;
	
	@Autowired
	private static NetworkShareService networkShareService;
	
	public static final String encryptKey = "90206f7a4fc149b592a14b7629caad5e";
	
	@Override
	@Transactional
	public void fileCopy(BranchScheme branchScheme, Logger logger) {
//		ApplicationSetting applicationSetting = applicationSettingService.findApplicationSettingByCode("FILE COPY");
//		String codeValue = applicationSetting.getCodeValue();
//		String resource = codeValue.split(";")[0].split("=")[1];
//		String destination = codeValue.split(";")[1].split("=")[1];
//		if (new File(resource).exists() && new File(resource).isDirectory() && new File(destination).exists() && new File(destination).isDirectory()) {
//			traverseFolder2(resource, destination, logger);
//		} else {
//			LogUtils.printLog(logger, "{} or {} not exists", resource, destination);
//		}

		Properties properties = new Properties();
		//download
		downloadFile(properties, logger);
		//upload
		uploadFile(properties, branchScheme, logger);
		
	}
	
	public void downloadFile(Properties properties, Logger logger) {
		try {
			properties.load(FileCopyServiceImpl.class.getClassLoader().getResourceAsStream("pos-config.properties"));

	        String username = properties.getProperty("file.octopusSourcePath.username");
	        String password = properties.getProperty("file.octopusSourcePath.password");
	        String aesDecrypt = EncryptionUtil.aesDecrypt(password, encryptKey);
	
	        String clientHost = properties.getProperty("file.octopusSourcePath.clientHost");
	        String directory = properties.getProperty("file.octopusSourcePath.directory");
	        String localDir = properties.getProperty("file.octopusSourcePath.localDir");
	        
	//		#smb://lotic:passw0rd@192.168.1.17/share/
	        String remoteUrl = "smb://"+username+":"+aesDecrypt+"@"+clientHost+"/"+directory+"/";
	        JcifsUtils.smbGet(remoteUrl, localDir, logger);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void uploadFile(Properties properties, BranchScheme branchScheme, Logger logger) {
		try {
			BranchInfo branchInfo = branchScheme.getBranchInfo();
			String clientDB = branchInfo.getClientDB();
			String username = branchInfo.getUser();
			String password = EncryptionUtil.aesDecrypt(branchInfo.getPassword(), encryptKey);
			String clientHost = branchInfo.getClientHost();
			
	//		#smb://lotic:passw0rd@192.168.1.17/share/
			String remoteUrl = "smb://"+username+":"+password+"@"+clientHost+"/"+clientDB+"/";
			properties.load(FileCopyServiceImpl.class.getClassLoader().getResourceAsStream("pos-config.properties"));
			String localDir = properties.getProperty("file.octopusSourcePath.localDir");

			JcifsUtils.smbPut(remoteUrl, localDir, logger);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void traverseFolder2(String resource, String destination, Logger logger) {

        File file = new File(resource);
        if (file.exists()) {
            File[] files = file.listFiles();
            if (files.length == 0) {
            	LogUtils.printLog(logger, "{}  directory don't  have file", file);
                return;
            } else {
                for (File file2 : files) {
                    if (file2.isDirectory()) {
                        traverseFolder2(file2.getAbsolutePath(), destination+File.separator+file2.getName(), logger);
                    } else {
						 File file3 = new File(destination);
						 if (file3.exists()) {
							 file3.delete();
						 } else {
							 file3.mkdirs();
						 }
						 file2.renameTo(new File(destination+File.separator+file2.getName()));
                    }
                }
            }
        }
    }
	
//	public static void main(String[] args) {
//		traverseFolder2("D:\\Maxim_test\\csv","D:\\Maxim_test\\Infrasys_Dbf",LogUtils.getCurrentThreadLogger());
//	}	
	
}
