package com.maxim.pos.common.service;

import java.text.MessageFormat;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.maxim.pos.common.entity.BranchScheme;
import com.maxim.pos.common.enumeration.ClientType;
import com.maxim.pos.common.enumeration.Direction;
import com.maxim.pos.common.util.LogUtils;
import com.maxim.pos.sales.service.MasterMonitoringService;
import com.maxim.pos.sales.service.MasterService;
import com.maxim.pos.sales.service.SalesService;
import com.maxim.pos.sales.service.SmtpService;

public class BranchSchemeExecutor implements Runnable {
	public static final Logger LOGGER = LoggerFactory.getLogger(BranchSchemeExecutor.class);
	private BranchScheme branchScheme;
	private Logger logger;
	private SalesService salesService;
	private MasterService masterService;
//	private PosSystemService posSystemService;
//	private PollEodControlDao pollEodControlDao;
	private SmtpService smtpService;
	private MasterMonitoringService masterMonitoringService;

	public BranchSchemeExecutor(){
		salesService  = (SalesService)SpringBeanUtil.context.getBean("salesService");
		masterService = (MasterService)SpringBeanUtil.context.getBean("masterService");
//		posSystemService = (PosSystemService)SpringBeanUtil.context.getBean("posSystemService");
		masterMonitoringService = (MasterMonitoringService) SpringBeanUtil.context.getBean("masterMonitoringService");
//		pollEodControlDao = (PollEodControlDao) SpringBeanUtil.context.getBean("pollEodControlDao");
		smtpService = (SmtpService) SpringBeanUtil.context.getBean("smtpService");
	}

	public String call() {
		// TODO Auto-generated method stub
		if (logger == null) {
			logger = LOGGER;
		}
        LogUtils.printLog(logger, "BranchSchemeExecutor Start {}", branchScheme.toString());

		if (branchScheme != null) {
			// process branchScheme
			switch (branchScheme.getPollSchemeType()) {

			case SALES_REALTIME:
			case SALES_EOD:
				switch (branchScheme.getDirection()) {
				case POS_TO_STG:
					salesService.processPosDataToStg(branchScheme, logger);
					break;
				// Seems never reach
				case STG_TO_EDW:
					salesService.processStgToEdw(branchScheme, logger);
					break;

				default:
					MessageFormat.format("Direction Invalid,SchemeType={0},Direction={1}",
							branchScheme.getPollSchemeType(), branchScheme.getDirection());
					break;
				}
				break;
			case MASTER:
				switch (branchScheme.getDirection()) {
				case MST_TO_STG:
					if(masterMonitoringService.AssertMonitoring(branchScheme)){
						masterService.processMasterServerToStaging(branchScheme, logger);
						masterMonitoringService.updateStatus(branchScheme);
					} else {
						logger.error("current BranchScheme:" + branchScheme +" don't have trigger event");
					}
					break;
				case STG_TO_POS:
					masterService.processStagingToPos(branchScheme, logger);
					break;

				default:

					break;
				}
				break;
			case SMTP:
				if (branchScheme.getDirection().equals(Direction.STG_TO_SMTP)) {
					smtpService.sendMail(logger);
				}
			default:

				break;
			}

		} else {
			LogUtils.printLog(logger, " BranchScheme is null");
		}
		
        LogUtils.printLog(logger, "BranchSchemeExecutor End {}", branchScheme.toString());

		return null;
	}

	public BranchScheme getBranchScheme() {
		return branchScheme;
	}

	public void setBranchScheme(BranchScheme branchScheme) {
		this.branchScheme = branchScheme;
	}

	public Logger getLogger() {
		return logger;
	}

	public void setLogger(Logger logger) {
		this.logger = logger;
	}

	@Override
	public void run() {
		
//		List<java.util.Date> dates = null ;
		
		
		if(branchScheme.getBranchInfo().getClientType().equals(ClientType.DBF)
				||branchScheme.getBranchInfo().getClientType().equals(ClientType.CSV)){
			call();
			return;
		}

//      Move to SalesServiceImpl
//		if (branchScheme.getPollSchemeType() == PollSchemeType.SALES_REALTIME) {
//			
//			String branchCode = branchScheme.getBranchMaster().getBranchCode();
//			PollEodControl control = pollEodControlDao.findLatestPollEodControl(branchCode, "C");
//			
////			String offlineStartTime = this.applicationSettingService.getApplicationSettingCodeValue(ApplicationSettingService.APPLICATION_SETTING_CODE_OFFLINE_START_TIME);
////			if ()
////
////			if(eodComplete){
////				LogUtils.printLog(logger, " {} Branch EOD IS STARTED , SALES_REALTIME PROCESS SKIP..."
////						,branchScheme.getBranchMaster().getBranchCode());
////				return;
////			}
//
//		}
//		if (branchScheme.getPollSchemeType() == PollSchemeType.SALES_EOD) 
//		{
//			String branchCode = branchScheme.getBranchMaster().getBranchCode();
//			PollEodControl control = pollEodControlDao.findLatestPollEodControl(branchCode, "C");
//			
//			java.sql.Date controlDate = DateUtil.getSQLDate(control.getBusinessDate());
//
//			dates = posSystemService.getPosEODBusinessDateList(branchScheme,controlDate,logger);
//			
//			if (dates.isEmpty())
//			{
//				LogUtils.printLog(logger, " {} Branch POS EOD IS NOT COMPLETED , SALES_EOD PROCESS WILL BE SKPPIED..."
//				,branchScheme.getBranchMaster().getBranchCode());
//				return;				
//			}
//			
////			boolean eodComplete = posSystemService.checkEodComplete(branchScheme,logger);
////			if(eodComplete){
////				LogUtils.printLog(logger, " {} Branch EOD IS COMPLETED , SALES_EOD PROCESS WILL START..."
////						,branchScheme.getBranchMaster().getBranchCode());
////				return;
////			}
//		}
		call();
	}

}
